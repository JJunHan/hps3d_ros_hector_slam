// Generated by gencpp from file hps_camera/distance.msg
// DO NOT EDIT!


#ifndef HPS_CAMERA_MESSAGE_DISTANCE_H
#define HPS_CAMERA_MESSAGE_DISTANCE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hps_camera
{
template <class ContainerAllocator>
struct distance_
{
  typedef distance_<ContainerAllocator> Type;

  distance_()
    : distance_average(0)  {
    }
  distance_(const ContainerAllocator& _alloc)
    : distance_average(0)  {
  (void)_alloc;
    }



   typedef uint16_t _distance_average_type;
  _distance_average_type distance_average;





  typedef boost::shared_ptr< ::hps_camera::distance_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hps_camera::distance_<ContainerAllocator> const> ConstPtr;

}; // struct distance_

typedef ::hps_camera::distance_<std::allocator<void> > distance;

typedef boost::shared_ptr< ::hps_camera::distance > distancePtr;
typedef boost::shared_ptr< ::hps_camera::distance const> distanceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hps_camera::distance_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hps_camera::distance_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hps_camera::distance_<ContainerAllocator1> & lhs, const ::hps_camera::distance_<ContainerAllocator2> & rhs)
{
  return lhs.distance_average == rhs.distance_average;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hps_camera::distance_<ContainerAllocator1> & lhs, const ::hps_camera::distance_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hps_camera

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hps_camera::distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hps_camera::distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hps_camera::distance_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hps_camera::distance_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hps_camera::distance_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hps_camera::distance_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hps_camera::distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7abbfa2a9d95604277f1b4a37d989bb6";
  }

  static const char* value(const ::hps_camera::distance_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7abbfa2a9d956042ULL;
  static const uint64_t static_value2 = 0x77f1b4a37d989bb6ULL;
};

template<class ContainerAllocator>
struct DataType< ::hps_camera::distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hps_camera/distance";
  }

  static const char* value(const ::hps_camera::distance_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hps_camera::distance_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint16 distance_average\n"
;
  }

  static const char* value(const ::hps_camera::distance_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hps_camera::distance_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distance_average);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct distance_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hps_camera::distance_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hps_camera::distance_<ContainerAllocator>& v)
  {
    s << indent << "distance_average: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.distance_average);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HPS_CAMERA_MESSAGE_DISTANCE_H
